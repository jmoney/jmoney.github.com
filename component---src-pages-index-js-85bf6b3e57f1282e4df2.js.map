{"version":3,"sources":["webpack:///./src/components/avatar.js","webpack:///./src/components/medium.js","webpack:///./src/pages/index.js"],"names":["Avatar","img","style","width","height","display","position","overflow","fontSize","alignItems","flexShrink","userSelect","borderRadius","justifyContent","href","src","alt","textAlign","objectFit","margin","MediumHeader","medium","marginBottom","node","author","username","uniqueSlug","target","rel","title","MediumDescription","color","virtuals","subtitle","Medium","borderBottom","padding","Template","data","markdownRemark","frontmatter","html","maxWidth","githubData","viewer","avatarUrl","border","name","dangerouslySetInnerHTML","__html","allMediumPost","edges","map","reverse","pageQuery"],"mappings":"2FAAA,yBAoCeA,IAlCA,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAChB,OACE,yBACEC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,QAAS,OACTC,SAAU,WACVC,SAAU,SACVC,SAAU,UACVC,WAAY,SACZC,WAAY,EACZC,WAAY,OACZC,aAAc,MACdC,eAAgB,WAGpB,uBAAGC,KAAK,qCACN,yBACEC,IAAKd,EACLe,IAAI,SACJd,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRa,UAAW,SACXC,UAAW,QACXC,OAAQ,S,sLC1BZC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,OACE,yBACEnB,MAAO,CAAEG,QAAQ,OAASQ,eAAe,gBAAkBL,SAAU,KAErE,wBACEN,MAAO,CACLG,QAAQ,OACRQ,eAAe,gBACfS,aAAc,EACdd,SAAU,KAGR,uBACIM,KAAI,0BAA4BO,EAAOE,KAAKC,OAAOC,SAA/C,IAA2DJ,EAAOE,KAAKG,WAC3EC,OAAO,SACPC,IAAI,uBAEHP,EAAOE,KAAKM,UAOvBC,EAAoB,SAAC,GAAD,IAAGT,EAAH,EAAGA,OAAH,OACtB,yBAAKnB,MAAO,CAAEC,MAAM,QAClB,uBAAGD,MAAO,CAAE6B,MAAM,UAAYT,aAAc,IACzCD,EAAOE,KAAKS,SAASC,YAqBfC,EAhBA,SAAC,GAAgB,IAAdb,EAAa,EAAbA,OACd,OACI,yBACInB,MAAO,CACPiC,aAAa,oBACbb,aAAa,OACbc,QAAQ,OACR5B,SAAU,KAGV,kBAAC,EAAD,CAAca,OAAQA,IACtB,kBAAC,EAAD,CAAmBA,OAAQA,MCxCxB,SAASgB,EAAT,GAEX,IADFC,EACC,EADDA,KAEQC,EAAmBD,EAAnBC,eACAC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KACrB,OACE,kBAAC,IAAD,KACI,yBAAKvC,MAAO,CAAEwC,SAAS,QAAUpB,aAAa,YAC1C,yBACIpB,MAAO,CACPG,QAAQ,OACRI,WAAW,SACXU,OAAO,cAGP,kBAAC,IAAD,CAAQlB,IAAKqC,EAAKK,WAAWL,KAAKM,OAAOC,YACzC,yBAAK3C,MAAO,CAAEkC,QAAS,KACvB,wBAAIlC,MAAO,CAAE4C,OAAO,SAAYR,EAAKK,WAAWL,KAAKM,OAAOG,QAGhE,yBACI7C,MAAO,CACCiC,aAAa,oBACbb,aAAa,OACbc,QAAQ,OACR5B,SAAU,KAGlB,4BAAKgC,EAAYX,OACjB,yBACAmB,wBAAyB,CAAEC,OAAQR,MAGvC,qCACCH,EAAKY,cAAcC,MACfC,KAAI,SAAA/B,GAAM,OAAI,kBAAC,EAAD,CAAcA,OAAQA,OACpCgC,YAQV,IAAMC,EAAS","file":"component---src-pages-index-js-85bf6b3e57f1282e4df2.js","sourcesContent":["import React from \"react\";\n\nconst Avatar = ({ img }) => {\n  return (\n    <div\n      style={{\n        width: 125,\n        height: 125,\n        display: \"flex\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        fontSize: \"1.25rem\",\n        alignItems: \"center\",\n        flexShrink: 0,\n        userSelect: \"none\",\n        borderRadius: \"50%\",\n        justifyContent: \"center\"\n      }}\n    >\n    <a href=\"https://www.github.com/jmoney8080\">\n      <img\n        src={img}\n        alt=\"avatar\"\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          textAlign: \"center\",\n          objectFit: \"cover\",\n          margin: 0\n        }}\n      />\n    </a>\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from \"react\"\n\nconst MediumHeader = ({ medium }) => {\n  return (\n    <div\n      style={{ display: `flex`, justifyContent: `space-between`, fontSize: 14 }}\n    >\n      <h3\n        style={{\n          display: `flex`,\n          justifyContent: `space-between`,\n          marginBottom: 0,\n          fontSize: 20,\n        }}\n      >\n            <a\n                href={`https://www.medium.com/${medium.node.author.username}/${medium.node.uniqueSlug}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                {medium.node.title}\n            </a>\n        </h3>\n    </div>\n  )\n}\n\nconst MediumDescription = ({ medium }) => (\n    <div style={{ width: `75%` }}>\n      <p style={{ color: `#586069`, marginBottom: 0 }}>\n        {medium.node.virtuals.subtitle}\n      </p>\n    </div>\n  )\n\nconst Medium = ({ medium }) => {\n    return (\n        <div\n            style={{\n            borderBottom: `1px solid #e1e4e8`,\n            marginBottom: `1rem`,\n            padding: `1rem`,\n            fontSize: 16,\n            }}\n        >\n            <MediumHeader medium={medium} />\n            <MediumDescription medium={medium} />\n        </div>\n    )\n}\n\nexport default Medium\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\";\nimport Avatar from \"../components/avatar\";\nimport MediumHeader from \"../components/medium\";\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <Layout>\n        <div style={{ maxWidth: `960px`, marginBottom: `1.45rem` }}>\n            <div\n                style={{\n                display: `flex`,\n                alignItems: `center`,\n                margin: `1.45rem 0`\n                }}\n            >\n                <Avatar img={data.githubData.data.viewer.avatarUrl} />\n                <div style={{ padding: 16 }}>\n                <h2 style={{ border: `none` }}>{data.githubData.data.viewer.name}</h2>\n                </div>\n            </div>\n            <div\n                style={{\n                        borderBottom: `1px solid #e1e4e8`,\n                        marginBottom: `1rem`,\n                        padding: `1rem`,\n                        fontSize: 16,\n                        }}\n                    >\n                <h1>{frontmatter.title}</h1>\n                <div\n                dangerouslySetInnerHTML={{ __html: html }}\n                />\n            </div>\n            <h2>Blogs</h2>\n            {data.allMediumPost.edges\n                .map(medium => <MediumHeader medium={medium}/>)\n                .reverse()\n            }\n        </div>\n    </Layout>\n\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    githubData {\n      data {\n        viewer {\n          name\n          avatarUrl\n        }\n      }\n    }\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        title\n      }\n    }\n    allMediumPost(sort: { fields: [createdAt], order: DESC }) {\n        edges {\n            node {\n                title\n                uniqueSlug\n                author {\n                    username\n                }\n                virtuals {\n                    previewImage {\n                        imageId\n                    }\n                    subtitle\n                }\n            }\n        }  \n    }\n  }`"],"sourceRoot":""}